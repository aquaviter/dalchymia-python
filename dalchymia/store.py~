#!/usr/bin/python
# _*_ coding: utf-8 _*_

"""

store.py
~~~~~~~~

store.py is a dalchymia library for data store.

prerequisites:

store.py has dependencies of following packages. Please install them before using this library.

$ pip install requests
$ pip install paho-mqtt

There are 2 ways you can choose to store data.

1. MQTT(MQ Telemetry Transport)
  MQTT is desined for constrained embedded devices. It is a publish/subscribe, extermely simple and lightweight messaging protodocl. 

2. HTTP(RESTful)
  HTTP is the most well-known protocol. It is easy to deployment to applications with exists libraries and frameworks.

Please use RESTful API in HTTP as long as your application doesn't need to store data in realtime.


And also, both clients use same JSON format as follows:

[
  "t" : "1390199481.371757",
  "d" : [
    { "id" : "7f0000000000002a96467812819b11e3", "v" : "23.9" },
    { "id" : "7f0000000000002a96474fda819b11e3", "v" : "80.0" }
  ]
]
  

usage:

1. Define parameters.

root_device_id = "7f0000000000002a96467812819b11e3"
device_id = ["7f0000000000002a96467812819b11e3", "7f0000000000002a96474fda819b11e3"]
product_hash_key = "0e33b56487d0956d7f65412fecd3a43e91f0012b08c26070104fc6875d5075bc"

2. Compose payload

Tere are 2 devices for data store.

# define instance
data = storeformat()

# get timestamp, values
timestamp = str(time.mktime(datetime.datetime.now().timetuple()))
v_data1 = str(random.randint(1,100))
v_data2 = str(random.randint(1000,2000))

# append values to 
data.appendvalue(device_id[0], v_data1)
data.appendvalue(device_id[1], v_data2)
data.appendrow(timestamp, data.data)

# get json format
body = data.getjson()

3.Store data

-MQTT

conn = mqttclient()
conn.connect()
conn.publish(root_device_id, body)
conn.disconnect()

-HTTP(RESTful)
conn = httpclient(product_hash_key, root_device_id)
res =  conn.store(body)

"""

import requests
import paho.mqtt.client as paho
import json
import time,datetime
import sys
import random
import Crypto.Cipher.AES
import Crypto.Hash.SHA256
import Crypto.Hash.HMAC
import binascii

api_base = 'https://api.dalchymia.net/api/v2'

class mqttclient:
    
    def __init__(self):
        self.server = "mq.dalchymia.net"
        self.port = 1883
        self.keepalive = 60
        self.basetopic = 'api/v2/store'
        self.client = paho.Client('mqtt_client')

        def on_connect(mosq, obj, rc):
            print("rc: " + str(rc))

        def on_message(mosq, obj, msg):
            print(msg.topic + " " + str(msg.qos) + " " + str(msg.payload))

        def on_publish(mosq, obj, mid):
            print("mid: " + str(mid))

        def on_disconnect(mosq, obj, rc):
            print("disconnected successfully.")

        self.client.on_connect = on_connect
        self.client.on_publish = on_publish
        self.client.on_message = on_message
        self.client.on_disconnect = on_disconnect

    def connect(self):
        self.client.connect(self.server, self.port, self.keepalive)

    def publish(self, root_device_id, payload):
        #print "Publish %s : %s" % (topic, payload)
        topic = self.basetopic + "/" + root_device_id
        self.client.publish(topic, payload, retain=False, qos=0)
            
    def disconnect(self):
        self.client.disconnect()

class httpclient:

    def __init__(self, hash_key, root_device_id):
        self.api_store = api_base + '/fw/store'
        self.hash_key = hash_key
        self.root_device_id = root_device_id
        print self.api_store

    def store(self, body):
        digest = Crypto.Hash.HMAC.new(binascii.a2b_hex(self.hash_key), body, Crypto.Hash.SHA256)
        headers = {'Content-Type': 'application/json; charset=utf-8',
                   'x-sha256-digest': digest.hexdigest(),
                   'x-root-device-id': self.root_device_id
                   }
        return requests.post(self.api_store, headers=headers, data=body)
    
class storeformat:
    def __init__(self):
        self.data = []
        self.row = {}
        self.base = []

    def appendvalue(self, device_id, value):
        self.data.append({"id":device_id, "v":value})
        return self.data

    def resetvalue(self):
        self.data = []

    def appendrow(self, timestamp, data):
        self.row['t'] = timestamp
        self.row['d'] = data
        self.base.append(self.row)

    def resetrow(self):
        self.row = {}

    def getjson(self):
        return json.dumps(self.base)

